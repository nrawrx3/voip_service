syntax = "proto3";

package voip;

service VoipService {
  // Client registers with the server and starts receiving events.
  rpc JoinRoom(ClientInfo) returns (stream VoipServerEvent) {}

  // We can connect to the server with another client and manually send debug
  // events.
  rpc SendDebugEventToClient(SendDebugEventPayload) returns (VoipServerEvent) {}
}

message ClientInfo {
  string client_id = 1;
  string user_name = 2;
  string room_name = 3;
}

message VoipServerEvent {
  enum EventType {
    event_type_client_app_connected = 0;
    event_type_member_joined = 1;
    event_type_member_left = 2;
    event_type_member_muted = 3;
    event_type_member_unmuted = 4;
    event_type_active_speakers_changed = 5;
    event_type_current_user_left = 6;
  }

  EventType event_type = 1;

  string current_user_name = 2;
  string current_room_name = 3;

  oneof event_payload {
    ClientAppConnected client_app_connected = 4;
    MemberJoined member_joined = 5;
    MemberLeft member_left = 6;
    MemberMuted member_muted = 7;
    MemberUnmuted member_unmuted = 8;
    ActiveSpeakersChanged active_speakers_changed = 9;
  }
}

message ClientAppConnected {
  repeated string existing_member_ids = 1;
  repeated string existing_active_speaker_ids = 2;
}

message MemberJoined { string member_id = 1; }

message MemberLeft { string member_id = 1; }

message MemberMuted { string member_id = 1; }

message MemberUnmuted { string member_id = 1; }

message MemberSpeaking { string member_id = 1; }

message ActiveSpeakersChanged { repeated string active_speaker_ids = 1; }

message SendDebugEventPayload {
  string client_id = 1;
  string dest_client_id = 2;
  VoipServerEvent event = 3;
}

// Room state snapshot (for initial registration or re-sync)
message RoomState {
  string room_name = 1;
  repeated string member_ids = 2;
  map<string, bool> muted_status = 3;
  map<string, bool> speaking_status = 4;
}